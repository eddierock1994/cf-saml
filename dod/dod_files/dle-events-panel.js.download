(function (window, videojs, moment, $) {
    // requires templates in Shared/_templates-events-panel.cshtml
    const DEBUG = false;

    function liveBarGetDateFormat(d) {
        //Nov. 10, 2017 - 9:45 AM EST
        if (DEBUG) console.log("shared getDateFormat",this.isToday());
        var dateToUse = new Date(d);
        var monthNum = dateToUse.getMonth();
        var formatToUse = 'MMM. D, YYYY - h:mma ';
        if (monthNum > 1 && monthNum < 7) {
            formatToUse = 'MMMM D, YYYY - h:mma ';
        }
        else if (monthNum == 8) {
            formatToUse = '[Sept]. D, YYYY - h:mma ';
        }

        if (this.isToday(d)) {
            formatToUse = 'h:mma ';
        }
        return moment(d).format(formatToUse) + tzAbbr(dateToUse).replace('US', '');
    }

    function liveBarIsToday(d) {
        var adjustedNow = moment(new Date()).subtract(this.playerData.secondsServerTimeOffset, 'seconds');
        return new Date(d).toDateString() === new Date(adjustedNow).toDateString();
    }

    Vue.component('events-panel', {
        props: ['moduleMode', 'itemSelect',
                'liveVideoList', 'upcomingVideoList',
                'liveNowVideoList', 'liveLaterVideoList',
                'configuration', 'currentVideo', 'currentSnippet',
                'playerData', 'requestStatus'
        ],
        template: '#dleTemplate-events-panel',
        data: function () {
            return {
                numLiveEventToShow: 0,
                numUpcomingEventsToShow: 0,
                dataLoaded: false,
            }
        },
        watch: {
            'requestStatus': {
                handler: function () {
                    // we catch the status b/c the the status will
                    // continue to change between "starting" and "complete" 
                    // b/c the module polls DVIDSAPI `live/list`
                    if (this.requestStatus === "complete") {
                        this.dataLoaded = true;
                    }
                }
            },
            'configuration.dvidsParams.liveTodayEventMaxResultView': {
                handler: function () {
                    if (DEBUG) console.log("s38: live-events-list", this.configuration.dvidsParams.liveTodayEventMaxResultView);

                    this.numLiveEventsToShow = this.configuration.dvidsParams.liveTodayEventMaxResultView || 0;
                },
            },
            'configuration.dvidsParams.upcomingEventMaxResultView': {
                handler: function () {
                    if (DEBUG) console.log("s45: live upcoming-events-list", this.configuration.dvidsParams.upcomingEventMaxResultView);
                    this.numUpcomingEventsToShow = this.configuration.dvidsParams.upcomingEventMaxResultView || 0;
                },

            }
        },
    });    

    Vue.component('live-bar', {
        template: '#dleTemplate-live-bar',
        props: ['liveVideoList', 'upcomingVideoList', 'configuration', 'playerData'],
        data: function () {
            return {
                showLiveBar: true,
                collapsed: true,
            }
        },
        computed: {
            isCollapsed: function () {
                return this.collapsed;
            },
            firstUpcomingEvent: function () {
                return this.upcomingVideoList[0];
            },
            filteredLiveVideoList: function() {
                // note: if the list is filtered a new temporary list is created
                // but otherwise the single list object is returned.
                // It means filtered lists are read only, don't modify.
                const liveLimit = this.liveEventLimit;
                const useLimit = liveLimit ? liveLimit : null;
                let retList = null;
                if (useLimit) {
                    retList = this.liveVideoList.slice(0, useLimit);
                } else {
                    retList = this.liveVideoList;
                }
                return retList;

            },
            filteredUpcomingVideoList: function() {
                // note: if the list is filtered a new temporary list is created
                // but otherwise the single list object is returned.
                // It means filtered lists are read only, modifications get ignored.     
                const upcomingLimit = this.upcomingEventLimit;
                const useLimit = upcomingLimit ? upcomingLimit : null;
                let retList = null;
                if (useLimit) {
                    retList = this.upcomingVideoList.slice(0, useLimit);
                } else {
                    retList = this.upcomingVideoList;
                }
                return retList;
            },
            isShowable: function () {
                // criteria: only showable if something to show
                //   OR configuration.dvidsParams.showPanelWhenEmpty == true
                return this.numEvents > 0
                    || this.configuration.dvidsParams.showPanelWhenEmpty;
            },
            liveNowString: function () {
                // this is the "Bar Title"
                // console.log("dep70: config", this.configuration);
                let lnStr;
                if (this.nothingLive) {
                    let lnStrConfig = this.liveEventsTitle;
                    lnStr = lnStrConfig ? lnStrConfig : "LIVE EVENT";
                } else {
                    let lnStrConfig = this.upcomingEventsTitle;
                    lnStr = lnStrConfig ? lnStrConfig : "LIVE NOW";
                }
                return lnStr;
            },
            nothingLive: function () {
                return this.liveVideoList.length === 0;
            },
            noUpcomingEventsMessage: function () {
                return this.configuration.dleDNNSettings.upcomingEventsDefaultText;
            },
            numEvents: function () {
                const numEvents = this.filteredLiveVideoList.length + this.filteredUpcomingVideoList.length;
                return numEvents ? numEvents : 0;
            },
            numUpcomingEvents: function () {
                // Number should be len of upcoming BUT
                // that can be limited,  and also, if one upcoming is above the fold, subract one
                // that is, this is really "number of extra events in dropdown"
                let numUpcoming = this.upcomingVideoList ? this.upcomingVideoList.length : 0;
                const limit = this.upcomingEventLimit;
                if (limit) {
                    numUpcoming = Math.min(limit, numUpcoming);
                }

                if (this.nothingLive) {
                    // then one upcoming is above fold, adjust this number
                    numUpcoming -= 1;
                }

                return numUpcoming

            },
            shouldShowTopUpcoming: function () {
                return this.nothingLive && this.upcomingVideoList && this.upcomingVideoList[0];
            },
           
            
            /* Start of:
             *  Computed by picking from configuration property (instead of deep watch)
            */
            liveEventsTitle: function () {
                return this.configuration.dleDNNSettings.upcomingEventsListTitle;
            },
            upcomingEventsTitle: function () {
                return this.configuration.dleDNNSettings.liveNowListTitle;
            },
            liveEventLimit: function () {
                return this.configuration.dvidsParams.liveTodayEventMaxResultView;
            },
            upcomingEventLimit: function () {
                return this.configuration.dvidsParams.upcomingEventMaxResultView;
            },
            // End of: Computed by picking from  configuration property

        },
        methods: {
            closeLiveBar: function () {
                this.showLiveBar = false;
            },
            getDateFormat: liveBarGetDateFormat, // shareable function above
            isSingleLine: function () {
                if (DEBUG) console.log("dep181: isOneLine", this.liveVideoList.length,  "<= 1")
                if (this.liveVideoList.length <= 1) {
                    return true
                }
                return false;
            },
            isLiveNow: function (item) {
                var adjustedNow = moment(new Date()).subtract(this.playerData.secondsServerTimeOffset, 'seconds');
                var start = moment(new Date(item.begin));
                var end = moment(new Date(item.end));
                return adjustedNow.isAfter(start) && adjustedNow.isBefore(end);
            },
            isToday: liveBarIsToday, // shareable function above 
            toggleCollapse: function () {
                this.collapsed = !this.collapsed;
                if (!this.collapsed) {
                    $(".drop-item").hide().fadeIn(750);
                }
            },
            urlForEvent: function (item) {
                if (DEBUG) console.log("dep170: configuration", this.configuration);
                return this.configuration.dleDNNSettings.dvidsLiveEventsUrl + item.id;
            }
        },
    });    

    Vue.component('live-bar-list', {
        template: '#dleTemplate-live-bar-list',
        props: ['liveVideoList', 'upcomingVideoList'],  

    })
    // live events listing
    Vue.component('live-events-list', {
        template: "#dleTemplate-live-events-list",
        props: ['liveVideoList', 'configuration', 'currentVideo',
            'currentSnippet', 'playerData', 'upcoming-video-list',
            'module-mode'],
        data: function () {
            if (DEBUG) console.log("d-ep22: upcomingNum", this.configuration.dvidsParams.upcomingEventMaxResultView);
            return { eventsToShow: 0 }
        },
        computed: {
            activeClasses: function () {
                return {
                    'live-events-list': this.configuration.dleDNNSettings.liveNowActiveClick === 'on' || this.configuration.dleDNNSettings.liveNowActiveClick === 'man',
                    'upcoming-events-list': this.configuration.dleDNNSettings.liveNowActiveClick === 'off',
                    'events-list': true
                }
            },
        },
        watch: {
            'configuration.dvidsParams.liveTodayEventMaxResultView': {
                handler: function () {
                    if (DEBUG) console.log("s38: live-events-list", this.configuration.dvidsParams.liveTodayEventMaxResultView);

                    this.eventsToShow = this.configuration.dvidsParams.liveTodayEventMaxResultView || 0;
                },
            },
        },
        methods: {
            itemSelect: function (item) {
                if (DEBUG) console.log("dep127: item-select");
                this.$emit('item_select', item);
            },
            activeEvent: function (item, index) {

                return {
                    'active': this.configuration.dleDNNSettings.liveNowActiveClick.toLowerCase() == 'man' ? ((item.id == this.currentVideo.id || item.id == this.currentSnippet.id) && this.isInActiveTimeRange(item)) : (item.id == this.currentVideo.id || item.id == this.currentSnippet.id),
                    'not-active': !(this.configuration.dleDNNSettings.liveNowActiveClick.toLowerCase() == 'man' ? ((item.id == this.currentVideo.id || item.id == this.currentSnippet.id) && this.isInActiveTimeRange(item)) : (item.id == this.currentVideo.id || item.id == this.currentSnippet.id)) && this.configuration.dleDNNSettings.liveNowActiveClick.toLowerCase() != 'off',
                    'customActive': this.configuration.dleDNNSettings.liveNowActiveClick === 'man' && !this.isInActiveTimeRange(item),
                    'all-off': this.configuration.dleDNNSettings.liveNowActiveClick.toLowerCase() === 'off',
                    'fade-in': true
                }
            },
            getDateFormat: function (d) {
                var dateToUse = new Date(d);
                var monthNum = dateToUse.getMonth();
                var formatToUse = 'MMM. D, YYYY - h:mma ';
                if (monthNum > 1 && monthNum < 7) {
                    formatToUse = 'MMMM D, YYYY - h:mma ';
                }
                else if (monthNum == 8) {
                    formatToUse = '[Sept]. D, YYYY - h:mma ';
                }
                return moment(d).format(formatToUse) + tzAbbr(dateToUse).replace('US', '');
            },
            isLiveNow: function (item) {
                var adjustedNow = moment(new Date()).subtract(this.playerData.secondsServerTimeOffset, 'seconds');
                var start = moment(new Date(item.begin));
                var end = moment(new Date(item.end));
                return adjustedNow.isAfter(start) && adjustedNow.isBefore(end);
            },
            isComingUpSoon: function (item) {
                var adjustedNow = moment(new Date()).subtract(this.playerData.secondsServerTimeOffset, 'seconds');
                var start = moment(new Date(item.begin)).subtract(15, 'minutes');
                var end = moment(new Date(item.end));
                return adjustedNow.isAfter(start) && adjustedNow.isBefore(end);
            },
            isInCustomTime: function (item, numMins) {
                var adjustedNow = moment(new Date()).subtract(this.playerData.secondsServerTimeOffset, 'seconds');
                var start = moment(new Date(item.begin)).subtract(numMins, 'minutes');
                var end = moment(new Date(item.end));
                return adjustedNow.isAfter(start) && adjustedNow.isBefore(end);
            },
            isInActiveTimeRange: function (item) {

                switch (this.configuration.dleDNNSettings.liveNowActiveManualTime) {
                    case 'fifteenMin':
                        return this.isComingUpSoon(item);
                    case 'thirtyMin':
                        return this.isInCustomTime(item, 30);
                    case 'sixtyMin':
                        return this.isInCustomTime(item, 60);
                    case 'niintyMin':
                    case 'ninetyMin':
                        return this.isInCustomTime(item, 90);
                    case 'oneTwentyMin':
                        return this.isInCustomTime(item, 120);
                    default:
                        return false;
                }
            },
             isClickDisabled: function (item) {

                if (this.configuration.dleDNNSettings.liveNowActiveClick == 'on') {
                    this.itemSelect(item);
                } else if (this.configuration.dleDNNSettings.liveNowActiveClick == 'man') {


                    if (this.isInActiveTimeRange(item)) {
                        this.itemSelect(item);
                    }
                }
            },
        },
    });
    // upcoming events listing  
    Vue.component('upcoming-events-list', {
        props: ['module-mode', 'upcomingVideoList', 'configuration', 'playerData',
        'initial-events-to-show'],
        data: function () {
            return { eventsToShow: this.initialEventsToShow }
        },
        watch: {
            // having trouble with this when nested in slot in live-events-list, thus the initial-events-to-show prop 
            'configuration.dvidsParams.upcomingEventMaxResultView': {
                handler: function () {
                    if (DEBUG) console.log("s535: upcoming-events-list", this.configuration.dvidsParams.upcomingEventMaxResultView);
                    this.eventsToShow = this.configuration.dvidsParams.upcomingEventMaxResultView || 0;
                }
            },
        },
        methods: {

            getDateFormat: function (d) {
                //Nov. 10, 2017 - 9:45 AM EST
                var dateToUse = new Date(d);
                var monthNum = dateToUse.getMonth();
                var formatToUse = 'MMM. D, YYYY - h:mma ';
                if (monthNum > 1 && monthNum < 7) {
                    formatToUse = 'MMMM D, YYYY - h:mma ';
                }
                else if (monthNum == 8) {
                    formatToUse = '[Sept]. D, YYYY - h:mma ';
                }
                return moment(d).format(formatToUse) + tzAbbr(dateToUse).replace('US', '');
            }
        },
        template: '#dleTemplate-upcoming-events-list',
    });

})(window, videojs, moment, jQuery);